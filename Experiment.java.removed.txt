private void createInstrButtonTask() {
        instrButtonTask = new ActionListener() {
            // @Override
            public void actionPerformed(ActionEvent evt) {
                if (evt.getActionCommand().equals("intro")) {

                    //Load VAS1:
                    dm.clearPanel();
                    dm.setVasPanel(NUM_VAS_QUESTIONS,vasText, loadText(this.getClass().getResourceAsStream(VAS_INSTR_FILENAME)));
                    dm.instrButton.setActionCommand("vasButton1");
                    dm.instrButton.addActionListener(instrButtonTask);
                    dm.showPanel();


                      //Load TS Instructions
                    //    if (tsChoice == 0) {
                      //      dm.clearPanel();
                        //    dm.setInstructionPanel(loadText(this.getClass().getResourceAsStream(TS_INSTR_A_FILENAME)));
                          //  dm.instrButton.setActionCommand("tsInstrA");
                            //dm.instrButton.addActionListener(instrButtonTask);
                           // dm.showPanel();

                        //}else {
                         //   dm.clearPanel();
                          //  dm.setInstructionPanel(loadText(this.getClass().getResourceAsStream(TS_INSTR_B_FILENAME)));
                           // dm.instrButton.setActionCommand("tsInstrB");
                            //dm.instrButton.addActionListener(instrButtonTask);
                            //dm.showPanel();
                        //}

                    //Movie question panel Code:
                    //THIS IS OLD:

                   //String[] quesText = {"Have you seen this movie before?", "Did this clip remind you of any past experiences?"};
                   //String[] rText = {"How much did you enjoy this film clip?", "How interested are you in watching the full movie?", "How believable did you find the main characters?"};
                    //String lhText[][] = new String[3][2];
                    //lhText[0][0] = "Not at all Sad";
                    //lhText[0][1] = "Extremely Sad";
                    //lhText[1][0] = "Not at all Curious";
                    //lhText[1][1] = "Extremely Curious";
                    //lhText[2][0] = "Super Sad";
                    //lhText[2][1] = "Super Mad and Bad";

                    //Movie Questions Code:
                  // dm.setMovieQuestionsPanel(2, quesText, 3, 10, lhText, rText);
                   //dm.clearPanel();
                   //dm.setQuestionsPanel(2, ynMovieOneText, 3, 10, movieOneScaleText); //lhText, rText);
                   //dm.instrButton.setActionCommand("movieOneQuesButton");
                   //dm.instrButton.addActionListener(instrButtonTask);
                   //dm.showPanel();

                    //tsQuestionsCode:
                    //dm.clearPanel();
                    //dm.setQuestionsPanel(1, ynTSText, 2, 10, tsScaleText); //lhText, rText);
                    //dm.instrButton.setActionCommand("tsQuesButton");
                    //dm.instrButton.addActionListener(instrButtonTask);
                    //dm.showPanel();

                    //Open Ended Question code:
                    //String test = "<html><font size = 40>Hello this is our question</font></html>";
                   // dm.clearPanel();
                    //dm.setOpenEndedQuesPanel(loadText(this.getClass().getResourceAsStream(OPEN_QUES_FILENAME)));
                    //dm.instrButton.setActionCommand("openEndedQues");
                    //dm.instrButton.addActionListener(instrButtonTask);
                    //dm.showPanel();

                    //Distraction Countdown Code:
                    //After instructions have been shown....
                   // dm.clearPanel();
                    //dm.setBlankPanel();
                   // dTimer = new Timer(D_TIME, distractTimerTask);
                   // dm.showPanel();
                    //dTimer.start();

                    //TS code:
                    //dm.clearPanel();
                    //dm.setBlankPanel();
                    //dm.mainPanel.addFocusListener(focusTask);
                    //dm.mainPanel.getInputMap().put(KeyStroke.getKeyStroke("released SPACE"), "pressed");
                    //dm.mainPanel.getActionMap().put("pressed", tsTask);
                    //tsTimer = new Timer(TS_TIME,tsTimerTask);
                    //tsTimer.start();
                    //dm.showPanel();
                    //dm.mainPanel.requestFocusInWindow();

                    //Table code
                    /*
                    dm.clearPanel();
                    dm.setTable(TABLE_HEADER,TABLE_ROW_HEIGHT);
                    rwTimer = new Timer(RW_TIME,rwTimerTask);
                    dm.showPanel();
                    rwTimer.start();
                   */

                   //Slider code:

                   //dm.setSingleVasPanel("vas low", "vas high", 100, 10, 500, 0);

                    //dm.clearPanel();
                    //dm.setVasPanel(6,vasText, loadText(this.getClass().getResourceAsStream(VAS_INSTR_FILENAME)));
                    //dm.instrButton.setActionCommand("vasButton1");
                    //dm.instrButton.addActionListener(instrButtonTask);
                    //dm.showPanel();


                   //DF code

                   // dfTimer = new Timer(DF_TIME, dFTimerTask);
                   // dm.clearPanel();
                   // dm.setDirForgetPanel(list.getNextWord());
                   // dm.showPanel();
                   // dfTimer.start();

                }else if (evt.getActionCommand().equals("vasButton1")) {
                    dm.clearPanel();
                    int i;
                    int[] vAnswers;
                    vAnswers = new int[dm.mVas.length];
                    for (i=0; i < dm.mVas.length; i++) {
                        System.out.println("Vas" + i + ": " + dm.mVas[i].getValue());
                        vAnswers[i] = dm.mVas[i].getValue();
                    }
                    p.addVAS(0,vAnswers);

                    //load dfPrac Instructions:
                    dm.clearPanel();
                    dm.setInstructionPanel(loadText(this.getClass().getResourceAsStream(DF_PRAC_INSTR_FILENAME)));
                    dm.instrButton.setActionCommand("dfPrac");
                    dm.instrButton.addActionListener(instrButtonTask);
                    dm.showPanel();

                }else if (evt.getActionCommand().equals("dfPrac")) {
                    //load the first df List and begin:
                    dfTimer = new Timer(DF_TIME, dFTimerTask);
                    dm.clearPanel();
                    dm.setDirForgetPanel(list.getNextWord());
                    dm.showPanel();
                    dfTimer.start();

                }else if (evt.getActionCommand().equals("dFMidInstr")) {
                    dm.clearPanel();
                    dm.setInstructionPanel(loadText(this.getClass().getResourceAsStream(DFMID_INSTR_FILENAME)));
                    dm.clearPanel();
                    dm.setDirForgetPanel(list.getNextWord());
                    dm.showPanel();
                    dfTimer.start();


                }else if (evt.getActionCommand().equals("distractInstr")) {
                    dm.clearPanel();
                    dm.setBlankPanel();
                    dTimer = new Timer(D_TIME, distractTimerTask);
                    dm.showPanel();
                    dTimer.start();

                }else if (evt.getActionCommand().equals("timeSubmit")) {
                    if (!(dm.getTime.getText() == null) && (dm.getTime.getText().matches("\\d+")) ) {
                        p.addCountdownAnswer(dm.getTime.getText());
                        dm.clearPanel();
                        //load the next panel...which is recall words
                        dm.setInstructionPanel(loadText(this.getClass().getResourceAsStream(RECALL_INSTR_FILENAME)));
                        dm.instrButton.setActionCommand("recallInstr");
                        dm.instrButton.addActionListener(instrButtonTask);
                        dm.showPanel();

                    }else {
                        dm.getTime.setText(null);
                        dm.showError("Please Enter Only Digits");
                    }

                }else if (evt.getActionCommand().equals("recallInstr")) {
                    dm.clearPanel();
                    dm.setTable(TABLE_HEADER,TABLE_ROW_HEIGHT);
                    rwTimer = new Timer(RW_TIME,rwTimerTask);
                    dm.showPanel();
                    rwTimer.start();

                    // dm.remInstructionPanel();
                    // THIS APPEARS TO BE TS CODE:
                    /*
                    dm.setBlankPanel();
                    dm.mainPanel.addFocusListener(focusTask);
                    dm.mainPanel.getInputMap().put(KeyStroke.getKeyStroke("released SPACE"), "pressed");
                    dm.mainPanel.getActionMap().put("pressed", tsTask);
                    tsTimer = new Timer(TS_TIME,tsTimerTask);
                    dm.showPanel();
                    tsTimer.start();
                    dm.mainPanel.requestFocusInWindow();

                    */


                }else if (evt.getActionCommand().equals("playMovieOne")) {
                    dm.mediaPlayerComponent.getMediaPlayer().addMediaPlayerEventListener(mediaListen);
                    dm.showMovie(SAD_MOVIE_LOCATION);


                }else if (evt.getActionCommand().equals("vasButton2")) {
                    dm.clearPanel();
                    int i;
                    int[] vAnswers;
                    vAnswers = new int[dm.mVas.length];
                    for (i=0; i < dm.mVas.length; i++) {
                        System.out.println("Vas" + i + ": " + dm.mVas[i].getValue());
                        vAnswers[i] = dm.mVas[i].getValue();
                    }
                    p.addVAS(1,vAnswers);

                    //load Movie Questions:
                    dm.clearPanel();
                    dm.setQuestionsPanel(NUM_MOVIE_ONE_YN_QUESTIONS, ynMovieOneText, NUM_MOVIE_ONE_SCALE_QUESTIONS, 10, movieOneScaleText); //lhText, rText);
                    dm.instrButton.setActionCommand("movieOneQuesButton");
                    dm.instrButton.addActionListener(instrButtonTask);
                    dm.showPanel();

                }else if (evt.getActionCommand().equals("movieOneQuesButton")) {

                    //get the button values
                    int i,k;
                    boolean allRadioSelected = true;


                    String[] msAns = new String[dm.rsButtons.length];
                    for (i =0;i<dm.rsButtons.length; i++ ) {
                        for (k=0; k<dm.rsButtons[i].length;k++) {
                            if (dm.rsButtons[i][k].isSelected()) {
                                System.out.println("Scale " + i + "= " + (k+1));
                                msAns[i] = Integer.toString(k+1);
                                k = dm.rsButtons[i].length+1;
                                //break;//break the loop
                            }

                            if (k+1 == dm.rsButtons[i].length) {
                                allRadioSelected = false;
                            }

                        }
                    }

                    if (!allRadioSelected) {
                        dm.showError("You did not select a rating on one of the scales.  Please select a rating for them all.");

                    } else {
                        //END CODE AND SETUP NEXT
                        String[] ynAns = new String[dm.yn.length];
                        for (k=0; k<dm.yn.length;k++) {
                            System.out.println("Y or N [" + k + "] = "  + dm.yn[k].getSelectedItem());
                            ynAns[k] = dm.yn[k].getSelectedItem().toString();
                        }
                        p.addYNAnswer(ynAns, 1);
                        p.addScaleAnswer(msAns, 1);

                      //Load TS Instructions
                        if (tsChoice == 0) {
                            dm.clearPanel();
                            dm.setInstructionPanel(loadText(this.getClass().getResourceAsStream(TS_INSTR_A_FILENAME)));
                            dm.instrButton.setActionCommand("tsInstrA");
                            dm.instrButton.addActionListener(instrButtonTask);
                            dm.showPanel();

                        }else {
                            dm.clearPanel();
                            dm.setInstructionPanel(loadText(this.getClass().getResourceAsStream(TS_INSTR_B_FILENAME)));
                            dm.instrButton.setActionCommand("tsInstrB");
                            dm.instrButton.addActionListener(instrButtonTask);
                            dm.showPanel();
                        }

                    }

                }else if (evt.getActionCommand().equals("tsInstrA")) {
                    dm.clearPanel();
                    dm.setBlankPanel();
                    dm.mainPanel.addFocusListener(focusTask);
                    dm.mainPanel.getInputMap().put(KeyStroke.getKeyStroke("released SPACE"), "pressed");
                    dm.mainPanel.getActionMap().put("pressed", tsTask);
                    tsTimer = new Timer(TS_TIME,tsTimerTask);
                    tsTimer.start();
                    dm.showPanel();
                    dm.mainPanel.requestFocusInWindow();

                }else if (evt.getActionCommand().equals("tsInstrB")) {
                    dm.clearPanel();
                    dm.setBlankPanel();
                    dm.mainPanel.addFocusListener(focusTask);
                    dm.mainPanel.getInputMap().put(KeyStroke.getKeyStroke("released SPACE"), "pressed");
                    dm.mainPanel.getActionMap().put("pressed", tsTask);
                    tsTimer = new Timer(TS_TIME,tsTimerTask);
                    tsTimer.start();
                    dm.showPanel();
                    dm.mainPanel.requestFocusInWindow();


                }else if (evt.getActionCommand().equals("vasButton3")) {
                    dm.clearPanel();
                    int i;
                    int[] vAnswers;
                    vAnswers = new int[dm.mVas.length];
                    for (i=0; i < dm.mVas.length; i++) {
                        System.out.println("Vas" + i + ": " + dm.mVas[i].getValue());
                        vAnswers[i] = dm.mVas[i].getValue();
                    }
                    p.addVAS(2,vAnswers);
                    dm.setQuestionsPanel(NUM_TS_YN_QUESTIONS, ynTSText, NUM_TS_SCALE_QUESTIONS, 10, tsScaleText); //lhText, rText);
                    dm.instrButton.setActionCommand("tsQuesButton");
                    dm.instrButton.addActionListener(instrButtonTask);
                    dm.showPanel();


                }else if (evt.getActionCommand().equals("tsQuesButton")) {
                   // dm.clearPanel();
                    //get the button values
                    int i,k;
                    boolean allRadioSelected = true;


                    String[] tsAns = new String[dm.rsButtons.length];
                    for (i =0;i<dm.rsButtons.length; i++ ) {
                        for (k=0; k<dm.rsButtons[i].length;k++) {
                            if (dm.rsButtons[i][k].isSelected()) {
                                System.out.println("Scale " + i + "= " + (k+1));
                                tsAns[i] = Integer.toString(k+1);
                                k = dm.rsButtons[i].length+1;
                                //break;//break the loop
                            }

                            if (k+1 == dm.rsButtons[i].length) {
                                allRadioSelected = false;
                            }

                        }
                    }
                    if (!allRadioSelected) {
                        dm.showError("You did not select a rating on one of the scales.  Please select a rating for them all.");
                    } else {
                        //END CODE AND SETUP NEXT
                        String[] ynAns = new String[dm.yn.length];
                        for (k=0; k<dm.yn.length;k++) {
                            System.out.println("Y or N [" + k + "] = "  + dm.yn[k].getSelectedItem());
                            ynAns[k] = dm.yn[k].getSelectedItem().toString();
                        }
                        p.addYNAnswer(ynAns, 3);
                        p.addScaleAnswer(tsAns, 3);
                        dm.clearPanel();
                        dm.setInstructionPanel(loadText(this.getClass().getResourceAsStream(MOVIE_TWO_INSTR_FILENAME)));
                        dm.instrButton.setActionCommand("playMovieTwo");
                        dm.instrButton.addActionListener(instrButtonTask);
                        dm.showPanel();

                    }


                }else if (evt.getActionCommand().equals("playMovieTwo")) {
                    dm.mediaPlayerComponent.getMediaPlayer().addMediaPlayerEventListener(mediaListen);
                    dm.showMovie(HAPPY_MOVIE_LOCATION);


                }else if (evt.getActionCommand().equals("vasButton4")) {
                    dm.clearPanel();
                    int i;
                    int[] vAnswers;
                    vAnswers = new int[dm.mVas.length];
                    for (i=0; i < dm.mVas.length; i++) {
                        System.out.println("Vas" + i + ": " + dm.mVas[i].getValue());
                        vAnswers[i] = dm.mVas[i].getValue();
                    }
                    p.addVAS(3,vAnswers);
                    dm.setQuestionsPanel(NUM_MOVIE_TWO_YN_QUESTIONS, ynMovieTwoText, NUM_MOVIE_TWO_SCALE_QUESTIONS, 10, movieTwoScaleText); //lhText, rText);
                    dm.instrButton.setActionCommand("movieTwoQuesButton");
                    dm.instrButton.addActionListener(instrButtonTask);
                    dm.showPanel();

                }else if (evt.getActionCommand().equals("movieTwoQuesButton")) {
                      //get the button values
                    int i,k;
                    boolean allRadioSelected = true;


                    String[] msAns = new String[dm.rsButtons.length];
                    for (i =0;i<dm.rsButtons.length; i++ ) {
                        for (k=0; k<dm.rsButtons[i].length;k++) {
                            if (dm.rsButtons[i][k].isSelected()) {
                                System.out.println("Scale " + i + "= " + (k+1));
                                msAns[i] = Integer.toString(k+1);
                                k = dm.rsButtons[i].length+1;
                                //break;//break the loop
                            }

                            if (k+1 == dm.rsButtons[i].length) {
                                allRadioSelected = false;
                            }

                        }
                    }
                    if (!allRadioSelected) {
                        dm.showError("You did not select a rating on one of the scales.  Please select a rating for them all.");
                    } else {
                        //END CODE AND SETUP NEXT
                        String[] ynAns = new String[dm.yn.length];
                        for (k=0; k<dm.yn.length;k++) {
                            System.out.println("Y or N [" + k + "] = "  + dm.yn[k].getSelectedItem());
                            ynAns[k] = dm.yn[k].getSelectedItem().toString();
                        }
                        p.addYNAnswer(ynAns, 2);
                        p.addScaleAnswer(msAns, 2);
                        dm.clearPanel();
                        dm.setOpenEndedQuesPanel(loadText(this.getClass().getResourceAsStream(OPEN_QUES_FILENAME)));
                        dm.instrButton.setActionCommand("openEndQues");
                        dm.instrButton.addActionListener(instrButtonTask);
                        dm.showPanel();
                }

                }else if (evt.getActionCommand().equals("openEndQues")) {
                    dm.clearPanel();
                    if (!(dm.openEnd.getText() == null) ) {
                        p.addOpenEndedAnswer(dm.openEnd.getText());
                        dm.clearPanel();
                        p.writeParticipantInfo();
                        //Outro instructions?
                        //cleanup movie and stuff.
                        System.exit(0);
                    }else {
                        dm.showError("Please Enter Text");
                 }
             }
        }};
    }